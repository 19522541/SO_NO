/**
 * Generated by Scrooge
 *   version: 20.4.0
 *   rev: 2d3edcfb2b025024319594ccdd4d7afe488fa6b4
 *   built at: 20200402-030121
 */
package com.projectz.service

import com.twitter.scrooge._
import com.twitter.finagle.{
  service => ctfs,
  Filter => finagle$Filter,
  Service => finagle$Service,
  thrift => _,
  _
}
import com.twitter.finagle.stats.{Counter, StatsReceiver}
import com.twitter.finagle.thrift.{
  Protocols,
  RichClientParam,
  RichServerParam,
  ServerToReqRep,
  ThriftClientRequest,
  ToThriftService
}
import com.twitter.util.{Future, Return, Throw, Throwables}
import com.twitter.io.Buf
import org.apache.thrift.protocol._
import org.apache.thrift.TApplicationException
import scala.collection.mutable.Builder
import scala.collection.immutable.{Map => immutable$Map, Set => immutable$Set}
import scala.language.higherKinds
import scala.reflect.{ClassTag, classTag}


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
trait TUserCacheService[+MM[_]] extends _root_.com.twitter.finagle.thrift.ThriftService {
  
  def ping(): MM[String]
  
  def addUser(userInfo: com.projectz.domain.thrift.TUserInfo): MM[Unit]
  
  def getUser(userId: com.projectz.domain.thrift.TUserID): MM[com.projectz.domain.thrift.TUserInfo]

  /**
   * Used to close the underlying `Service`.
   * Not a user-defined API.
   */
  def asClosable: _root_.com.twitter.util.Closable = _root_.com.twitter.util.Closable.nop
}


object TUserCacheService extends _root_.com.twitter.finagle.thrift.GeneratedThriftService { self =>

  val annotations: immutable$Map[String, String] = immutable$Map.empty

  val methods: immutable$Set[ThriftMethod] = immutable$Set(
    self.Ping,
    self.AddUser,
    self.GetUser
  )

  trait ServicePerEndpoint
    extends ToThriftService
    with _root_.com.twitter.finagle.thrift.service.Filterable[ServicePerEndpoint] {
    def ping : _root_.com.twitter.finagle.Service[self.Ping.Args, self.Ping.SuccessType]
    def addUser : _root_.com.twitter.finagle.Service[self.AddUser.Args, self.AddUser.SuccessType]
    def getUser : _root_.com.twitter.finagle.Service[self.GetUser.Args, self.GetUser.SuccessType]

    def withPing(ping : _root_.com.twitter.finagle.Service[self.Ping.Args, self.Ping.SuccessType]): ServicePerEndpoint = this

    def withAddUser(addUser : _root_.com.twitter.finagle.Service[self.AddUser.Args, self.AddUser.SuccessType]): ServicePerEndpoint = this

    def withGetUser(getUser : _root_.com.twitter.finagle.Service[self.GetUser.Args, self.GetUser.SuccessType]): ServicePerEndpoint = this

    /**
     * Prepends the given type-agnostic `Filter` to all of the `Services`
     * and returns a copy of the `ServicePerEndpoint` now including the filter.
     */
    def filtered(filter: _root_.com.twitter.finagle.Filter.TypeAgnostic): ServicePerEndpoint =
      ServicePerEndpoint.apply(ping, addUser, getUser).filtered(filter)

    /**
     * Converts the `ServicePerEndpoint` to a `GeneratedThriftService`.
     * @see _root_.com.twitter.scrooge.ToThriftService
     */
    def toThriftService: _root_.com.twitter.finagle.thrift.ThriftService = MethodPerEndpoint(this)

    /**
     * Used to close the underlying `Service`.
     * Not a user-defined API.
     */
    def asClosable: _root_.com.twitter.util.Closable = _root_.com.twitter.util.Closable.nop
  }

  trait ReqRepServicePerEndpoint
    extends ToThriftService
    with _root_.com.twitter.finagle.thrift.service.Filterable[ReqRepServicePerEndpoint] {
    def ping : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.Ping.Args], _root_.com.twitter.scrooge.Response[self.Ping.SuccessType]]
    def addUser : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.AddUser.Args], _root_.com.twitter.scrooge.Response[self.AddUser.SuccessType]]
    def getUser : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.GetUser.Args], _root_.com.twitter.scrooge.Response[self.GetUser.SuccessType]]

    def withPing(ping : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.Ping.Args], _root_.com.twitter.scrooge.Response[self.Ping.SuccessType]]): ReqRepServicePerEndpoint = this

    def withAddUser(addUser : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.AddUser.Args], _root_.com.twitter.scrooge.Response[self.AddUser.SuccessType]]): ReqRepServicePerEndpoint = this

    def withGetUser(getUser : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.GetUser.Args], _root_.com.twitter.scrooge.Response[self.GetUser.SuccessType]]): ReqRepServicePerEndpoint = this

    /**
     * Prepends the given type-agnostic `Filter` to all of the `Services`
     * and returns a copy of the `ServicePerEndpoint` now including the filter.
     */
    def filtered(filter: com.twitter.finagle.Filter.TypeAgnostic): ReqRepServicePerEndpoint =
      ReqRepServicePerEndpoint.apply(ping, addUser, getUser).filtered(filter)

    /**
     * Converts the `ServicePerEndpoint` to a `GeneratedThriftService`.
     * @see _root_.com.twitter.scrooge.ToThriftService
     */
    def toThriftService: _root_.com.twitter.finagle.thrift.ThriftService = ReqRepMethodPerEndpoint(this)

    /**
     * Used to close the underlying `Service`.
     * Not a user-defined API.
     */
    def asClosable: _root_.com.twitter.util.Closable = _root_.com.twitter.util.Closable.nop
  }

  @deprecated("Use ServicePerEndpoint", "2017-11-07")
  trait BaseServiceIface extends ToThriftService {
    def ping : com.twitter.finagle.Service[self.Ping.Args, self.Ping.SuccessType]
    def addUser : com.twitter.finagle.Service[self.AddUser.Args, self.AddUser.SuccessType]
    def getUser : com.twitter.finagle.Service[self.GetUser.Args, self.GetUser.SuccessType]

    def toThriftService: _root_.com.twitter.finagle.thrift.ThriftService = new MethodIface(this)
  }

  object ServicePerEndpoint {

    def apply(
      ping : _root_.com.twitter.finagle.Service[self.Ping.Args, self.Ping.SuccessType],
      addUser : _root_.com.twitter.finagle.Service[self.AddUser.Args, self.AddUser.SuccessType],
      getUser : _root_.com.twitter.finagle.Service[self.GetUser.Args, self.GetUser.SuccessType]
    ): ServicePerEndpoint = new ServicePerEndpointImpl(ping, addUser, getUser)

    private final class ServicePerEndpointImpl(
      override val ping : _root_.com.twitter.finagle.Service[self.Ping.Args, self.Ping.SuccessType],
      override val addUser : _root_.com.twitter.finagle.Service[self.AddUser.Args, self.AddUser.SuccessType],
      override val getUser : _root_.com.twitter.finagle.Service[self.GetUser.Args, self.GetUser.SuccessType]
    ) extends ServicePerEndpoint {

      override def withPing(
        ping : _root_.com.twitter.finagle.Service[self.Ping.Args, self.Ping.SuccessType]
      ): ServicePerEndpoint =
        new ServicePerEndpointImpl(ping, addUser, getUser)

      override def withAddUser(
        addUser : _root_.com.twitter.finagle.Service[self.AddUser.Args, self.AddUser.SuccessType]
      ): ServicePerEndpoint =
        new ServicePerEndpointImpl(ping, addUser, getUser)

      override def withGetUser(
        getUser : _root_.com.twitter.finagle.Service[self.GetUser.Args, self.GetUser.SuccessType]
      ): ServicePerEndpoint =
        new ServicePerEndpointImpl(ping, addUser, getUser)

      override def filtered(filter: _root_.com.twitter.finagle.Filter.TypeAgnostic): ServicePerEndpoint =
        new ServicePerEndpointImpl(
          ping = filter.toFilter.andThen(ping),
          addUser = filter.toFilter.andThen(addUser),
          getUser = filter.toFilter.andThen(getUser)
        )

      override def asClosable: _root_.com.twitter.util.Closable =
        _root_.com.twitter.util.Closable.all(
          this.ping,
          this.addUser,
          this.getUser
        )
    }
  }

  object ReqRepServicePerEndpoint {

    def apply(
      ping :  _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.Ping.Args], _root_.com.twitter.scrooge.Response[self.Ping.SuccessType]],
      addUser :  _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.AddUser.Args], _root_.com.twitter.scrooge.Response[self.AddUser.SuccessType]],
      getUser :  _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.GetUser.Args], _root_.com.twitter.scrooge.Response[self.GetUser.SuccessType]]
    ): ReqRepServicePerEndpoint =
      new ReqRepServicePerEndpointImpl(ping, addUser, getUser)

    private final class ReqRepServicePerEndpointImpl(
      override val ping : _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.Ping.Args], _root_.com.twitter.scrooge.Response[self.Ping.SuccessType]],
      override val addUser : _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.AddUser.Args], _root_.com.twitter.scrooge.Response[self.AddUser.SuccessType]],
      override val getUser : _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.GetUser.Args], _root_.com.twitter.scrooge.Response[self.GetUser.SuccessType]]
    ) extends ReqRepServicePerEndpoint {

      override def withPing(
        ping : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.Ping.Args], _root_.com.twitter.scrooge.Response[self.Ping.SuccessType]]
      ): ReqRepServicePerEndpoint =
        new ReqRepServicePerEndpointImpl(ping, addUser, getUser)
      override def withAddUser(
        addUser : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.AddUser.Args], _root_.com.twitter.scrooge.Response[self.AddUser.SuccessType]]
      ): ReqRepServicePerEndpoint =
        new ReqRepServicePerEndpointImpl(ping, addUser, getUser)
      override def withGetUser(
        getUser : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.GetUser.Args], _root_.com.twitter.scrooge.Response[self.GetUser.SuccessType]]
      ): ReqRepServicePerEndpoint =
        new ReqRepServicePerEndpointImpl(ping, addUser, getUser)

      override def filtered(filter: com.twitter.finagle.Filter.TypeAgnostic): ReqRepServicePerEndpoint =
        new ReqRepServicePerEndpointImpl(
          ping = filter.toFilter.andThen(ping),
          addUser = filter.toFilter.andThen(addUser),
          getUser = filter.toFilter.andThen(getUser)
        )

      override def asClosable: _root_.com.twitter.util.Closable =
        _root_.com.twitter.util.Closable.all(
          this.ping,
          this.addUser,
          this.getUser
        )
    }
  }

  def unsafeBuildFromMethods(methods: immutable$Map[ThriftMethod,  _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[_], _root_.com.twitter.scrooge.Response[_]]]): ReqRepServicePerEndpoint = {
    val ping = methods.get(self.Ping) match {
      case Some(impl) => impl.asInstanceOf[self.Ping.ReqRepServicePerEndpointServiceType]
      case _ => throw new IllegalArgumentException(s"No implementation found for method Ping in ${methods.keySet}")
    }
    val addUser = methods.get(self.AddUser) match {
      case Some(impl) => impl.asInstanceOf[self.AddUser.ReqRepServicePerEndpointServiceType]
      case _ => throw new IllegalArgumentException(s"No implementation found for method AddUser in ${methods.keySet}")
    }
    val getUser = methods.get(self.GetUser) match {
      case Some(impl) => impl.asInstanceOf[self.GetUser.ReqRepServicePerEndpointServiceType]
      case _ => throw new IllegalArgumentException(s"No implementation found for method GetUser in ${methods.keySet}")
    }

    ReqRepServicePerEndpoint(ping, addUser, getUser)
  }

  @deprecated("Use ServicePerEndpoint", "2017-11-07")
  case class ServiceIface(
    ping : com.twitter.finagle.Service[self.Ping.Args, self.Ping.SuccessType],
    addUser : com.twitter.finagle.Service[self.AddUser.Args, self.AddUser.SuccessType],
    getUser : com.twitter.finagle.Service[self.GetUser.Args, self.GetUser.SuccessType]
  ) extends BaseServiceIface
    with _root_.com.twitter.finagle.thrift.service.Filterable[ServiceIface] {

    /**
     * Prepends the given type-agnostic `Filter` to all of the `Services`
     * and returns a copy of the `ServiceIface` now including the filter.
     */
    def filtered(filter: com.twitter.finagle.Filter.TypeAgnostic): ServiceIface =
      copy(
        ping = filter.toFilter.andThen(ping),
        addUser = filter.toFilter.andThen(addUser),
        getUser = filter.toFilter.andThen(getUser)
      )
  }

  implicit object ServicePerEndpointBuilder
    extends _root_.com.twitter.finagle.thrift.service.ServicePerEndpointBuilder[ServicePerEndpoint] {
      def servicePerEndpoint(
        thriftService: _root_.com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
        clientParam: RichClientParam
      ): ServicePerEndpoint =
        ServicePerEndpoint(
          ping = _root_.com.twitter.finagle.thrift.service.ThriftServicePerEndpoint(
            self.Ping,
            thriftService,
            clientParam
          ),
          addUser = _root_.com.twitter.finagle.thrift.service.ThriftServicePerEndpoint(
            self.AddUser,
            thriftService,
            clientParam
          ),
          getUser = _root_.com.twitter.finagle.thrift.service.ThriftServicePerEndpoint(
            self.GetUser,
            thriftService,
            clientParam
          )
        )
  }

  implicit object ReqRepServicePerEndpointBuilder
    extends _root_.com.twitter.finagle.thrift.service.ReqRepServicePerEndpointBuilder[ReqRepServicePerEndpoint] {
      def servicePerEndpoint(
        thriftService: _root_.com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
        clientParam: RichClientParam
      ): ReqRepServicePerEndpoint =
        ReqRepServicePerEndpoint(
          ping = _root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint(self.Ping, thriftService, clientParam),
          addUser = _root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint(self.AddUser, thriftService, clientParam),
          getUser = _root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint(self.GetUser, thriftService, clientParam)
        )
  }

  @deprecated("Use ServicePerEndpointBuilder", "2017-11-07")
  implicit object ServiceIfaceBuilder
    extends com.twitter.finagle.thrift.ServiceIfaceBuilder[ServiceIface] {
      def newServiceIface(
        binaryService: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
        clientParam: RichClientParam
      ): ServiceIface =
        ServiceIface(
          ping = _root_.com.twitter.finagle.thrift.service.ThriftServicePerEndpoint(
            self.Ping,
            binaryService,
            clientParam
          ),
          addUser = _root_.com.twitter.finagle.thrift.service.ThriftServicePerEndpoint(
            self.AddUser,
            binaryService,
            clientParam
          ),
          getUser = _root_.com.twitter.finagle.thrift.service.ThriftServicePerEndpoint(
            self.GetUser,
            binaryService,
            clientParam
          )
        )
  }

  object Ping extends ThriftMethod {
    
    object Args extends ValidatingThriftStructCodec3[Args] with StructBuilderFactory[Args] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct: TStruct = new TStruct("ping_args")
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      private val fieldTypes: IndexedSeq[ClassTag[_]] = IndexedSeq(
      )
    
      private[this] val structFields: Seq[ThriftStructField[Args]] = {
        Seq(
        )
      }
    
      override lazy val metaData: ThriftStructMetaData[Args] =
        new ThriftStructMetaData(this, structFields, fieldInfos, Seq(), structAnnotations)
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      /**
       * Checks that the struct is a valid as a new instance. If there are any missing required or
       * construction required fields, return a non-empty list.
       */
      def validateNewInstance(item: Args): scala.Seq[com.twitter.scrooge.validation.Issue] = {
        val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]
    
        buf.toList
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
        )
    
      def newBuilder(): StructBuilder[Args] = new ArgsStructBuilder(_root_.scala.None, fieldTypes)
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Args = {
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
      ): Args =
        new Args(
        )
    
      def unapply(_item: Args): Boolean = true
    
    
    
    }
    
    class Args(
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product
      with ValidatingThriftStruct[Args]
      with java.io.Serializable
    {
      import Args._
    
      def this(
      ) = this(
        immutable$Map.empty
      )
    
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator) &&
          x._passthroughFields == y._passthroughFields
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args])
    
      override def hashCode: Int = {
        _root_.scala.runtime.ScalaRunTime._hashCode(this)
      }
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 0
    
      override def productElement(n: Int): Any = n match {
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ValidatingThriftStructCodec3[Args] = Args
    
      def newBuilder(): StructBuilder[Args] = new ArgsStructBuilder(_root_.scala.Some(this), fieldTypes)
    }
    
    private[service] class ArgsStructBuilder(instance: _root_.scala.Option[Args], fieldTypes: IndexedSeq[ClassTag[_]])
        extends StructBuilder[Args](fieldTypes) {
    
      def build(): Args = instance match {
        case _root_.scala.Some(i) =>
          Args(
          )
        case _root_.scala.None =>
          if (fieldArray.contains(null)) throw new InvalidFieldsException(structBuildError("Args"))
          else {
            Args(
            )
          }
        }
    }

    type SuccessType = String
    
    object Result extends ValidatingThriftStructCodec3[Result] with StructBuilderFactory[Result] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct: TStruct = new TStruct("ping_result")
      val SuccessField: TField = new TField("success", TType.STRING, 0)
      val SuccessFieldManifest: Manifest[String] = implicitly[Manifest[String]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      private val fieldTypes: IndexedSeq[ClassTag[_]] = IndexedSeq(
        classTag[_root_.scala.Option[String]].asInstanceOf[ClassTag[_]]
      )
    
      private[this] val structFields: Seq[ThriftStructField[Result]] = {
        Seq(
          new ThriftStructField[Result](
            SuccessField,
            _root_.scala.Some(SuccessFieldManifest),
            classOf[Result]) {
              def getValue[R](struct: Result): R = struct.success.asInstanceOf[R]
          }
        )
      }
    
      override lazy val metaData: ThriftStructMetaData[Result] =
        new ThriftStructMetaData(this, structFields, fieldInfos, Seq(), structAnnotations)
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      /**
       * Checks that the struct is a valid as a new instance. If there are any missing required or
       * construction required fields, return a non-empty list.
       */
      def validateNewInstance(item: Result): scala.Seq[com.twitter.scrooge.validation.Issue] = {
        val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]
    
        buf ++= validateField(item.success)
        buf.toList
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                field
              }
            }
        )
    
      def newBuilder(): StructBuilder[Result] = new ResultStructBuilder(_root_.scala.None, fieldTypes)
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[String] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.STRING =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[String] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[String]] = _root_.scala.Some(_item.success)
    
    
      @inline private[service] def readSuccessValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeSuccessField(success_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(success_item)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[String],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[String] with ThriftStruct
      with _root_.scala.Product1[Option[String]]
      with ValidatingThriftStruct[Result]
      with java.io.Serializable
    {
      import Result._
    
      def this(
        success: _root_.scala.Option[String] = _root_.scala.None
      ) = this(
        success,
        immutable$Map.empty
      )
    
      def _1: _root_.scala.Option[String] = success
    
      def successField: Option[String] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Nil
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[String] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator) &&
          x._passthroughFields == y._passthroughFields
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result])
    
      override def hashCode: Int = {
        _root_.scala.runtime.ScalaRunTime._hashCode(this)
      }
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ValidatingThriftStructCodec3[Result] = Result
    
      def newBuilder(): StructBuilder[Result] = new ResultStructBuilder(_root_.scala.Some(this), fieldTypes)
    }
    
    private[service] class ResultStructBuilder(instance: _root_.scala.Option[Result], fieldTypes: IndexedSeq[ClassTag[_]])
        extends StructBuilder[Result](fieldTypes) {
    
      def build(): Result = instance match {
        case _root_.scala.Some(i) =>
          Result(
            (if (fieldArray(0) == null) i.success else fieldArray(0)).asInstanceOf[_root_.scala.Option[String]]
          )
        case _root_.scala.None =>
          if (fieldArray.contains(null)) throw new InvalidFieldsException(structBuildError("Result"))
          else {
            Result(
              fieldArray(0).asInstanceOf[_root_.scala.Option[String]]
            )
          }
        }
    }

    val annotations: immutable$Map[String, String] = immutable$Map.empty

    type FunctionType = Function1[Args,Future[String]]
    type ReqRepFunctionType = Function1[_root_.com.twitter.scrooge.Request[Args],Future[_root_.com.twitter.scrooge.Response[String]]]

    type ServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ReqRepServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]]

    def toServicePerEndpointService(f: FunctionType): ServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toReqRepServicePerEndpointService(f: ReqRepFunctionType): ReqRepServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]] { request: _root_.com.twitter.scrooge.Request[Args] =>
        f(request)
      }


    val name: String = "ping"
    val serviceName: String = "TUserCacheService"
    val argsCodec: Args.type = Args
    val responseCodec: Result.type = Result
    val oneway: Boolean = false
  }

  // Compatibility aliases.
  val ping$args: Ping.Args.type = Ping.Args
  type ping$args = Ping.Args

  val ping$result: Ping.Result.type = Ping.Result
  type ping$result = Ping.Result

  object AddUser extends ThriftMethod {
    
    object Args extends ValidatingThriftStructCodec3[Args] with StructBuilderFactory[Args] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct: TStruct = new TStruct("addUser_args")
      val UserInfoField: TField = new TField("userInfo", TType.STRUCT, 1)
      val UserInfoFieldManifest: Manifest[com.projectz.domain.thrift.TUserInfo] = implicitly[Manifest[com.projectz.domain.thrift.TUserInfo]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          UserInfoField,
          false,
          true,
          UserInfoFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      private val fieldTypes: IndexedSeq[ClassTag[_]] = IndexedSeq(
        classTag[com.projectz.domain.thrift.TUserInfo].asInstanceOf[ClassTag[_]]
      )
    
      private[this] val structFields: Seq[ThriftStructField[Args]] = {
        Seq(
          new ThriftStructField[Args](
            UserInfoField,
            _root_.scala.Some(UserInfoFieldManifest),
            classOf[Args]) {
              def getValue[R](struct: Args): R = struct.userInfo.asInstanceOf[R]
          }
        )
      }
    
      override lazy val metaData: ThriftStructMetaData[Args] =
        new ThriftStructMetaData(this, structFields, fieldInfos, Seq(), structAnnotations)
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
        if (_item.userInfo == null) throw new TProtocolException("Required field userInfo cannot be null")
      }
    
      /**
       * Checks that the struct is a valid as a new instance. If there are any missing required or
       * construction required fields, return a non-empty list.
       */
      def validateNewInstance(item: Args): scala.Seq[com.twitter.scrooge.validation.Issue] = {
        val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]
    
        if (item.userInfo == null)
          buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(0))
        buf ++= validateField(item.userInfo)
        buf.toList
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          userInfo =
            {
              val field = original.userInfo
              com.projectz.domain.thrift.TUserInfo.withoutPassthroughFields(field)
            }
        )
    
      def newBuilder(): StructBuilder[Args] = new ArgsStructBuilder(_root_.scala.None, fieldTypes)
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Args = {
        var userInfo: com.projectz.domain.thrift.TUserInfo = null
        var _got_userInfo = false
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    userInfo = readUserInfoValue(_iprot)
                    _got_userInfo = true
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'userInfo' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        if (!_got_userInfo) throw new TProtocolException("Required field 'userInfo' was not found in serialized data for struct Args")
        new Args(
          userInfo,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        userInfo: com.projectz.domain.thrift.TUserInfo
      ): Args =
        new Args(
          userInfo
        )
    
      def unapply(_item: Args): _root_.scala.Option[com.projectz.domain.thrift.TUserInfo] = _root_.scala.Some(_item.userInfo)
    
    
      @inline private[service] def readUserInfoValue(_iprot: TProtocol): com.projectz.domain.thrift.TUserInfo = {
        com.projectz.domain.thrift.TUserInfo.decode(_iprot)
      }
    
      @inline private def writeUserInfoField(userInfo_item: com.projectz.domain.thrift.TUserInfo, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(UserInfoField)
        writeUserInfoValue(userInfo_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeUserInfoValue(userInfo_item: com.projectz.domain.thrift.TUserInfo, _oprot: TProtocol): Unit = {
        userInfo_item.write(_oprot)
      }
    
    
    }
    
    class Args(
        val userInfo: com.projectz.domain.thrift.TUserInfo,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product1[com.projectz.domain.thrift.TUserInfo]
      with ValidatingThriftStruct[Args]
      with java.io.Serializable
    {
      import Args._
    
      def this(
        userInfo: com.projectz.domain.thrift.TUserInfo
      ) = this(
        userInfo,
        immutable$Map.empty
      )
    
      def _1: com.projectz.domain.thrift.TUserInfo = userInfo
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (userInfo ne null) writeUserInfoField(userInfo, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        userInfo: com.projectz.domain.thrift.TUserInfo = this.userInfo,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          userInfo,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator) &&
          x._passthroughFields == y._passthroughFields
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args])
    
      override def hashCode: Int = {
        _root_.scala.runtime.ScalaRunTime._hashCode(this)
      }
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.userInfo
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ValidatingThriftStructCodec3[Args] = Args
    
      def newBuilder(): StructBuilder[Args] = new ArgsStructBuilder(_root_.scala.Some(this), fieldTypes)
    }
    
    private[service] class ArgsStructBuilder(instance: _root_.scala.Option[Args], fieldTypes: IndexedSeq[ClassTag[_]])
        extends StructBuilder[Args](fieldTypes) {
    
      def build(): Args = instance match {
        case _root_.scala.Some(i) =>
          Args(
            (if (fieldArray(0) == null) i.userInfo else fieldArray(0)).asInstanceOf[com.projectz.domain.thrift.TUserInfo]
          )
        case _root_.scala.None =>
          if (fieldArray.contains(null)) throw new InvalidFieldsException(structBuildError("Args"))
          else {
            Args(
              fieldArray(0).asInstanceOf[com.projectz.domain.thrift.TUserInfo]
            )
          }
        }
    }

    type SuccessType = Unit
    
    object Result extends ValidatingThriftStructCodec3[Result] with StructBuilderFactory[Result] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct: TStruct = new TStruct("addUser_result")
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      private val fieldTypes: IndexedSeq[ClassTag[_]] = IndexedSeq(
      )
    
      private[this] val structFields: Seq[ThriftStructField[Result]] = {
        Seq(
        )
      }
    
      override lazy val metaData: ThriftStructMetaData[Result] =
        new ThriftStructMetaData(this, structFields, fieldInfos, Seq(), structAnnotations)
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      /**
       * Checks that the struct is a valid as a new instance. If there are any missing required or
       * construction required fields, return a non-empty list.
       */
      def validateNewInstance(item: Result): scala.Seq[com.twitter.scrooge.validation.Issue] = {
        val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]
    
        buf.toList
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
        )
    
      def newBuilder(): StructBuilder[Result] = new ResultStructBuilder(_root_.scala.None, fieldTypes)
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Result = {
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
      ): Result =
        new Result(
        )
    
      def unapply(_item: Result): Boolean = true
    
    
    
    }
    
    class Result(
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[Unit] with ThriftStruct
      with _root_.scala.Product
      with ValidatingThriftStruct[Result]
      with java.io.Serializable
    {
      import Result._
    
      def this(
      ) = this(
        immutable$Map.empty
      )
    
    
      def successField: Option[Unit] = Some(())
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Nil
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator) &&
          x._passthroughFields == y._passthroughFields
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result])
    
      override def hashCode: Int = {
        _root_.scala.runtime.ScalaRunTime._hashCode(this)
      }
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 0
    
      override def productElement(n: Int): Any = n match {
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ValidatingThriftStructCodec3[Result] = Result
    
      def newBuilder(): StructBuilder[Result] = new ResultStructBuilder(_root_.scala.Some(this), fieldTypes)
    }
    
    private[service] class ResultStructBuilder(instance: _root_.scala.Option[Result], fieldTypes: IndexedSeq[ClassTag[_]])
        extends StructBuilder[Result](fieldTypes) {
    
      def build(): Result = instance match {
        case _root_.scala.Some(i) =>
          Result(
          )
        case _root_.scala.None =>
          if (fieldArray.contains(null)) throw new InvalidFieldsException(structBuildError("Result"))
          else {
            Result(
            )
          }
        }
    }

    val annotations: immutable$Map[String, String] = immutable$Map.empty

    type FunctionType = Function1[Args,Future[Unit]]
    type ReqRepFunctionType = Function1[_root_.com.twitter.scrooge.Request[Args],Future[_root_.com.twitter.scrooge.Response[Unit]]]

    type ServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ReqRepServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]]

    def toServicePerEndpointService(f: FunctionType): ServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toReqRepServicePerEndpointService(f: ReqRepFunctionType): ReqRepServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]] { request: _root_.com.twitter.scrooge.Request[Args] =>
        f(request)
      }


    val name: String = "addUser"
    val serviceName: String = "TUserCacheService"
    val argsCodec: Args.type = Args
    val responseCodec: Result.type = Result
    val oneway: Boolean = false
  }

  // Compatibility aliases.
  val addUser$args: AddUser.Args.type = AddUser.Args
  type addUser$args = AddUser.Args

  val addUser$result: AddUser.Result.type = AddUser.Result
  type addUser$result = AddUser.Result

  object GetUser extends ThriftMethod {
    
    object Args extends ValidatingThriftStructCodec3[Args] with StructBuilderFactory[Args] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct: TStruct = new TStruct("getUser_args")
      val UserIdField: TField = new TField("userId", TType.STRUCT, 1)
      val UserIdFieldManifest: Manifest[com.projectz.domain.thrift.TUserID] = implicitly[Manifest[com.projectz.domain.thrift.TUserID]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          UserIdField,
          false,
          true,
          UserIdFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      private val fieldTypes: IndexedSeq[ClassTag[_]] = IndexedSeq(
        classTag[com.projectz.domain.thrift.TUserID].asInstanceOf[ClassTag[_]]
      )
    
      private[this] val structFields: Seq[ThriftStructField[Args]] = {
        Seq(
          new ThriftStructField[Args](
            UserIdField,
            _root_.scala.Some(UserIdFieldManifest),
            classOf[Args]) {
              def getValue[R](struct: Args): R = struct.userId.asInstanceOf[R]
          }
        )
      }
    
      override lazy val metaData: ThriftStructMetaData[Args] =
        new ThriftStructMetaData(this, structFields, fieldInfos, Seq(), structAnnotations)
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
        if (_item.userId == null) throw new TProtocolException("Required field userId cannot be null")
      }
    
      /**
       * Checks that the struct is a valid as a new instance. If there are any missing required or
       * construction required fields, return a non-empty list.
       */
      def validateNewInstance(item: Args): scala.Seq[com.twitter.scrooge.validation.Issue] = {
        val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]
    
        if (item.userId == null)
          buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(0))
        buf ++= validateField(item.userId)
        buf.toList
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          userId =
            {
              val field = original.userId
              com.projectz.domain.thrift.TUserID.withoutPassthroughFields(field)
            }
        )
    
      def newBuilder(): StructBuilder[Args] = new ArgsStructBuilder(_root_.scala.None, fieldTypes)
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Args = {
        var userId: com.projectz.domain.thrift.TUserID = null
        var _got_userId = false
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    userId = readUserIdValue(_iprot)
                    _got_userId = true
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'userId' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        if (!_got_userId) throw new TProtocolException("Required field 'userId' was not found in serialized data for struct Args")
        new Args(
          userId,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        userId: com.projectz.domain.thrift.TUserID
      ): Args =
        new Args(
          userId
        )
    
      def unapply(_item: Args): _root_.scala.Option[com.projectz.domain.thrift.TUserID] = _root_.scala.Some(_item.userId)
    
    
      @inline private[service] def readUserIdValue(_iprot: TProtocol): com.projectz.domain.thrift.TUserID = {
        com.projectz.domain.thrift.TUserID.decode(_iprot)
      }
    
      @inline private def writeUserIdField(userId_item: com.projectz.domain.thrift.TUserID, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(UserIdField)
        writeUserIdValue(userId_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeUserIdValue(userId_item: com.projectz.domain.thrift.TUserID, _oprot: TProtocol): Unit = {
        userId_item.write(_oprot)
      }
    
    
    }
    
    class Args(
        val userId: com.projectz.domain.thrift.TUserID,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product1[com.projectz.domain.thrift.TUserID]
      with ValidatingThriftStruct[Args]
      with java.io.Serializable
    {
      import Args._
    
      def this(
        userId: com.projectz.domain.thrift.TUserID
      ) = this(
        userId,
        immutable$Map.empty
      )
    
      def _1: com.projectz.domain.thrift.TUserID = userId
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (userId ne null) writeUserIdField(userId, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        userId: com.projectz.domain.thrift.TUserID = this.userId,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          userId,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator) &&
          x._passthroughFields == y._passthroughFields
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args])
    
      override def hashCode: Int = {
        _root_.scala.runtime.ScalaRunTime._hashCode(this)
      }
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.userId
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ValidatingThriftStructCodec3[Args] = Args
    
      def newBuilder(): StructBuilder[Args] = new ArgsStructBuilder(_root_.scala.Some(this), fieldTypes)
    }
    
    private[service] class ArgsStructBuilder(instance: _root_.scala.Option[Args], fieldTypes: IndexedSeq[ClassTag[_]])
        extends StructBuilder[Args](fieldTypes) {
    
      def build(): Args = instance match {
        case _root_.scala.Some(i) =>
          Args(
            (if (fieldArray(0) == null) i.userId else fieldArray(0)).asInstanceOf[com.projectz.domain.thrift.TUserID]
          )
        case _root_.scala.None =>
          if (fieldArray.contains(null)) throw new InvalidFieldsException(structBuildError("Args"))
          else {
            Args(
              fieldArray(0).asInstanceOf[com.projectz.domain.thrift.TUserID]
            )
          }
        }
    }

    type SuccessType = com.projectz.domain.thrift.TUserInfo
    
    object Result extends ValidatingThriftStructCodec3[Result] with StructBuilderFactory[Result] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct: TStruct = new TStruct("getUser_result")
      val SuccessField: TField = new TField("success", TType.STRUCT, 0)
      val SuccessFieldManifest: Manifest[com.projectz.domain.thrift.TUserInfo] = implicitly[Manifest[com.projectz.domain.thrift.TUserInfo]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      private val fieldTypes: IndexedSeq[ClassTag[_]] = IndexedSeq(
        classTag[_root_.scala.Option[com.projectz.domain.thrift.TUserInfo]].asInstanceOf[ClassTag[_]]
      )
    
      private[this] val structFields: Seq[ThriftStructField[Result]] = {
        Seq(
          new ThriftStructField[Result](
            SuccessField,
            _root_.scala.Some(SuccessFieldManifest),
            classOf[Result]) {
              def getValue[R](struct: Result): R = struct.success.asInstanceOf[R]
          }
        )
      }
    
      override lazy val metaData: ThriftStructMetaData[Result] =
        new ThriftStructMetaData(this, structFields, fieldInfos, Seq(), structAnnotations)
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      /**
       * Checks that the struct is a valid as a new instance. If there are any missing required or
       * construction required fields, return a non-empty list.
       */
      def validateNewInstance(item: Result): scala.Seq[com.twitter.scrooge.validation.Issue] = {
        val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]
    
        buf ++= validateField(item.success)
        buf.toList
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                com.projectz.domain.thrift.TUserInfo.withoutPassthroughFields(field)
              }
            }
        )
    
      def newBuilder(): StructBuilder[Result] = new ResultStructBuilder(_root_.scala.None, fieldTypes)
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[com.projectz.domain.thrift.TUserInfo] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[com.projectz.domain.thrift.TUserInfo] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[com.projectz.domain.thrift.TUserInfo]] = _root_.scala.Some(_item.success)
    
    
      @inline private[service] def readSuccessValue(_iprot: TProtocol): com.projectz.domain.thrift.TUserInfo = {
        com.projectz.domain.thrift.TUserInfo.decode(_iprot)
      }
    
      @inline private def writeSuccessField(success_item: com.projectz.domain.thrift.TUserInfo, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: com.projectz.domain.thrift.TUserInfo, _oprot: TProtocol): Unit = {
        success_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[com.projectz.domain.thrift.TUserInfo],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[com.projectz.domain.thrift.TUserInfo] with ThriftStruct
      with _root_.scala.Product1[Option[com.projectz.domain.thrift.TUserInfo]]
      with ValidatingThriftStruct[Result]
      with java.io.Serializable
    {
      import Result._
    
      def this(
        success: _root_.scala.Option[com.projectz.domain.thrift.TUserInfo] = _root_.scala.None
      ) = this(
        success,
        immutable$Map.empty
      )
    
      def _1: _root_.scala.Option[com.projectz.domain.thrift.TUserInfo] = success
    
      def successField: Option[com.projectz.domain.thrift.TUserInfo] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Nil
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[com.projectz.domain.thrift.TUserInfo] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator) &&
          x._passthroughFields == y._passthroughFields
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result])
    
      override def hashCode: Int = {
        _root_.scala.runtime.ScalaRunTime._hashCode(this)
      }
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ValidatingThriftStructCodec3[Result] = Result
    
      def newBuilder(): StructBuilder[Result] = new ResultStructBuilder(_root_.scala.Some(this), fieldTypes)
    }
    
    private[service] class ResultStructBuilder(instance: _root_.scala.Option[Result], fieldTypes: IndexedSeq[ClassTag[_]])
        extends StructBuilder[Result](fieldTypes) {
    
      def build(): Result = instance match {
        case _root_.scala.Some(i) =>
          Result(
            (if (fieldArray(0) == null) i.success else fieldArray(0)).asInstanceOf[_root_.scala.Option[com.projectz.domain.thrift.TUserInfo]]
          )
        case _root_.scala.None =>
          if (fieldArray.contains(null)) throw new InvalidFieldsException(structBuildError("Result"))
          else {
            Result(
              fieldArray(0).asInstanceOf[_root_.scala.Option[com.projectz.domain.thrift.TUserInfo]]
            )
          }
        }
    }

    val annotations: immutable$Map[String, String] = immutable$Map.empty

    type FunctionType = Function1[Args,Future[com.projectz.domain.thrift.TUserInfo]]
    type ReqRepFunctionType = Function1[_root_.com.twitter.scrooge.Request[Args],Future[_root_.com.twitter.scrooge.Response[com.projectz.domain.thrift.TUserInfo]]]

    type ServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ReqRepServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]]

    def toServicePerEndpointService(f: FunctionType): ServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toReqRepServicePerEndpointService(f: ReqRepFunctionType): ReqRepServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]] { request: _root_.com.twitter.scrooge.Request[Args] =>
        f(request)
      }


    val name: String = "getUser"
    val serviceName: String = "TUserCacheService"
    val argsCodec: Args.type = Args
    val responseCodec: Result.type = Result
    val oneway: Boolean = false
  }

  // Compatibility aliases.
  val getUser$args: GetUser.Args.type = GetUser.Args
  type getUser$args = GetUser.Args

  val getUser$result: GetUser.Result.type = GetUser.Result
  type getUser$result = GetUser.Result


  trait MethodPerEndpoint
    extends TUserCacheService[Future] {
    
    def ping(): Future[String]
    
    def addUser(userInfo: com.projectz.domain.thrift.TUserInfo): Future[Unit]
    
    def getUser(userId: com.projectz.domain.thrift.TUserID): Future[com.projectz.domain.thrift.TUserInfo]
  }

  object MethodPerEndpoint {

    def apply(servicePerEndpoint: ServicePerEndpoint): MethodPerEndpoint = {
      new MethodPerEndpointImpl(servicePerEndpoint) {}
    }

    /**
     * Use `MethodPerEndpoint.apply()` instead of this constructor.
     */
    class MethodPerEndpointImpl protected (servicePerEndpoint: ServicePerEndpoint)
      extends MethodPerEndpoint {
        def ping(): Future[String] =
          servicePerEndpoint.ping(self.Ping.Args())
        def addUser(userInfo: com.projectz.domain.thrift.TUserInfo): Future[Unit] =
          servicePerEndpoint.addUser(self.AddUser.Args(userInfo)).unit
        def getUser(userId: com.projectz.domain.thrift.TUserID): Future[com.projectz.domain.thrift.TUserInfo] =
          servicePerEndpoint.getUser(self.GetUser.Args(userId))

        override def asClosable: _root_.com.twitter.util.Closable =
          servicePerEndpoint.asClosable
    }
  }

  object ReqRepMethodPerEndpoint {

    def apply(servicePerEndpoint: ReqRepServicePerEndpoint): MethodPerEndpoint =
      new ReqRepMethodPerEndpointImpl(servicePerEndpoint) { }

    /**
     * Use `ReqRepMethodPerEndpoint.apply()` instead of this constructor.
     */
    class ReqRepMethodPerEndpointImpl protected (servicePerEndpoint: ReqRepServicePerEndpoint)
      extends MethodPerEndpoint {

        def ping(): Future[String] = {
          val requestCtx = _root_.com.twitter.finagle.context.Contexts.local.getOrElse(_root_.com.twitter.finagle.thrift.Headers.Request.Key, () => _root_.com.twitter.finagle.thrift.Headers.Request.newValues)
          val scroogeRequest = _root_.com.twitter.scrooge.Request(requestCtx.values, self.Ping.Args())
          servicePerEndpoint.ping(scroogeRequest).transform(_root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint.transformResult(_))
        }
        def addUser(userInfo: com.projectz.domain.thrift.TUserInfo): Future[Unit] = {
          val requestCtx = _root_.com.twitter.finagle.context.Contexts.local.getOrElse(_root_.com.twitter.finagle.thrift.Headers.Request.Key, () => _root_.com.twitter.finagle.thrift.Headers.Request.newValues)
          val scroogeRequest = _root_.com.twitter.scrooge.Request(requestCtx.values, self.AddUser.Args(userInfo))
          servicePerEndpoint.addUser(scroogeRequest).transform(_root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint.transformResult(_)).unit
        }
        def getUser(userId: com.projectz.domain.thrift.TUserID): Future[com.projectz.domain.thrift.TUserInfo] = {
          val requestCtx = _root_.com.twitter.finagle.context.Contexts.local.getOrElse(_root_.com.twitter.finagle.thrift.Headers.Request.Key, () => _root_.com.twitter.finagle.thrift.Headers.Request.newValues)
          val scroogeRequest = _root_.com.twitter.scrooge.Request(requestCtx.values, self.GetUser.Args(userId))
          servicePerEndpoint.getUser(scroogeRequest).transform(_root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint.transformResult(_))
        }

        override def asClosable: _root_.com.twitter.util.Closable =
          servicePerEndpoint.asClosable
    }
  }

  @deprecated("Use MethodPerEndpoint", "2017-11-07")
  class MethodIface(serviceIface: BaseServiceIface)
    extends FutureIface {
    def ping(): Future[String] =
      serviceIface.ping(self.Ping.Args())
    def addUser(userInfo: com.projectz.domain.thrift.TUserInfo): Future[Unit] =
      serviceIface.addUser(self.AddUser.Args(userInfo)).unit
    def getUser(userId: com.projectz.domain.thrift.TUserID): Future[com.projectz.domain.thrift.TUserInfo] =
      serviceIface.getUser(self.GetUser.Args(userId))
  }

  implicit object MethodPerEndpointBuilder
    extends _root_.com.twitter.finagle.thrift.service.MethodPerEndpointBuilder[ServicePerEndpoint, MethodPerEndpoint] {
    def methodPerEndpoint(servicePerEndpoint: ServicePerEndpoint): MethodPerEndpoint =
      MethodPerEndpoint(servicePerEndpoint)
  }

  @deprecated("Use MethodPerEndpointBuilder", "2018-01-12")
  implicit object ThriftServiceBuilder
    extends _root_.com.twitter.finagle.thrift.service.ThriftServiceBuilder[ServicePerEndpoint, TUserCacheService[Future]] {
    def build(servicePerEndpoint: ServicePerEndpoint): MethodPerEndpoint =
      MethodPerEndpoint(servicePerEndpoint)
  }

  implicit object ReqRepMethodPerEndpointBuilder
    extends _root_.com.twitter.finagle.thrift.service.ReqRepMethodPerEndpointBuilder[ReqRepServicePerEndpoint, MethodPerEndpoint] {
    def methodPerEndpoint(servicePerEndpoint: ReqRepServicePerEndpoint): MethodPerEndpoint =
      ReqRepMethodPerEndpoint(servicePerEndpoint)
  }

  @deprecated("Use MethodPerEndpointBuilder", "2017-11-07")
  implicit object MethodIfaceBuilder
    extends com.twitter.finagle.thrift.MethodIfaceBuilder[ServiceIface, TUserCacheService[Future]] {
    def newMethodIface(serviceIface: ServiceIface): MethodIface =
      new MethodIface(serviceIface)
  }

  @deprecated("Use MethodPerEndpoint", "2017-11-07")
  trait FutureIface
    extends TUserCacheService[Future] {
    
    def ping(): Future[String]
    
    def addUser(userInfo: com.projectz.domain.thrift.TUserInfo): Future[Unit]
    
    def getUser(userId: com.projectz.domain.thrift.TUserID): Future[com.projectz.domain.thrift.TUserInfo]
  }

  class FinagledClient(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      clientParam: RichClientParam)
    extends TUserCacheService$FinagleClient(service, clientParam)
    with FutureIface
    with MethodPerEndpoint {

    @deprecated("Use com.twitter.finagle.thrift.RichClientParam", "2017-08-16")
    def this(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      protocolFactory: org.apache.thrift.protocol.TProtocolFactory = Protocols.binaryFactory(),
      serviceName: String = "TUserCacheService",
      stats: com.twitter.finagle.stats.StatsReceiver = com.twitter.finagle.stats.NullStatsReceiver,
      responseClassifier: ctfs.ResponseClassifier = ctfs.ResponseClassifier.Default
    ) = this(
      service,
      RichClientParam(
        protocolFactory,
        serviceName,
        clientStats = stats,
        responseClassifier = responseClassifier
      )
    )

    @deprecated("Use com.twitter.finagle.thrift.RichClientParam", "2017-08-16")
    def this(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      protocolFactory: org.apache.thrift.protocol.TProtocolFactory,
      serviceName: String,
      stats: com.twitter.finagle.stats.StatsReceiver
    ) = this(
      service,
      RichClientParam(
        protocolFactory,
        serviceName,
        clientStats = stats
      )
    )
  }

  class FinagledService(
      iface: TUserCacheService[Future],
      serverParam: RichServerParam)
    extends TUserCacheService$FinagleService(iface, serverParam) {

    @deprecated("Use com.twitter.finagle.thrift.RichServerParam", "2017-08-16")
    def this(
      iface: TUserCacheService[Future],
      protocolFactory: org.apache.thrift.protocol.TProtocolFactory,
      serviceName: String = "TUserCacheService"
    ) = this(iface, RichServerParam(protocolFactory, serviceName))
  }

  class Filter(serverParam: RichServerParam) {
    private[this] def protocolFactory: TProtocolFactory = serverParam.restrictedProtocolFactory

    private[this] def serviceName: String = serverParam.serviceName
    private[this] def responseClassifier: ctfs.ResponseClassifier = serverParam.responseClassifier
    private[this] def stats: StatsReceiver = serverParam.serverStats
    private[this] def perEndpointStats: Boolean = serverParam.perEndpointStats && !stats.isNull

    private[this] val tlReusableBuffer: TReusableBuffer = TReusableBuffer(maxThriftBufferSize = serverParam.maxThriftBufferSize)

    private[service] def exception(name: String, seqid: Int, code: Int, message: String): Buf = {
      val x = new TApplicationException(code, message)
      val memoryBuffer = tlReusableBuffer.get()
      try {
        val oprot = protocolFactory.getProtocol(memoryBuffer)

        oprot.writeMessageBegin(new TMessage(name, TMessageType.EXCEPTION, seqid))
        x.write(oprot)
        oprot.writeMessageEnd()
        oprot.getTransport().flush()

        // make a copy of the array of bytes to construct a new buffer because memoryBuffer is reusable
        Buf.ByteArray.Shared(memoryBuffer.getArray(), 0, memoryBuffer.length())
      } finally {
        tlReusableBuffer.reset()
      }
    }

    private def reply(name: String, seqid: Int, result: ThriftStruct): Buf = {
      val memoryBuffer = tlReusableBuffer.get()
      try {
        val oprot = protocolFactory.getProtocol(memoryBuffer)
        val start = System.nanoTime
        oprot.writeMessageBegin(new TMessage(name, TMessageType.REPLY, seqid))
        result.write(oprot)
        oprot.writeMessageEnd()
        _root_.com.twitter.finagle.tracing.Trace.recordBinary("srv/response_serialization_ns", System.nanoTime - start)
        oprot.getTransport().flush()

        // make a copy of the array of bytes to construct a new buffer because memoryBuffer is reusable
        Buf.ByteArray.Shared(memoryBuffer.getArray(), 0, memoryBuffer.length())
      } finally {
        tlReusableBuffer.reset()
      }
    }

    private def missingResult(name: String): TApplicationException = {
      new TApplicationException(
        TApplicationException.MISSING_RESULT,
        name + " failed: unknown result"
      )
    }

    private def setServiceName(ex: Throwable): Throwable =
      if (this.serviceName == "") ex
      else {
        ex match {
          case se: _root_.com.twitter.finagle.SourcedException =>
            se.serviceName = this.serviceName
            se
          case _ => ex
        }
      }

    private def recordRequest(methodStats: _root_.com.twitter.finagle.thrift.ThriftMethodStats): Unit = {
      methodStats.requestsCounter.incr()
    }

    private def recordResponse(reqRep: ctfs.ReqRep, methodStats: _root_.com.twitter.finagle.thrift.ThriftMethodStats): Unit = {
      ServerToReqRep.setCtx(reqRep)
      val responseClass = responseClassifier.applyOrElse(reqRep, ctfs.ResponseClassifier.Default)
      responseClass match {
        case ctfs.ResponseClass.Ignorable => // Do nothing.
        case ctfs.ResponseClass.Successful(_) =>
          methodStats.successCounter.incr()
        case ctfs.ResponseClass.Failed(_) =>
          methodStats.failuresCounter.incr()
          reqRep.response match {
            case Throw(ex) =>
              methodStats.failuresScope.counter(Throwables.mkString(ex): _*).incr()
            case _ =>
          }
      }
    }

    final protected def perMethodStatsFilter(
      method: ThriftMethod
    ): finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[method.Args, method.Result]] = {
      val methodStats = if (perEndpointStats) {
        _root_.com.twitter.finagle.thrift.ThriftMethodStats((if (serviceName != "") stats.scope(serviceName) else stats).scope(method.name))
      } else {
        _root_.com.twitter.finagle.thrift.ThriftMethodStats.Null
      }

      new finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[method.Args, method.Result]] {
        def apply(
          req: (TProtocol, Int),
          service: finagle$Service[(TProtocol, Int), RichResponse[method.Args, method.Result]]
        ): Future[Array[Byte]] = {
          recordRequest(methodStats)
          service(req).transform {
            case Return(value) =>
              value match {
                case SuccessfulResponse(args, _, result) =>
                  recordResponse(ctfs.ReqRep(args, _root_.com.twitter.util.Return(result.successField.get)), methodStats)
                case ProtocolExceptionResponse(args, _, exp) =>
                  recordResponse(ctfs.ReqRep(args, _root_.com.twitter.util.Throw(exp)), methodStats)
                case ThriftExceptionResponse(args, _, ex) =>
                  val rep = ex match {
                    case exp: ThriftException => setServiceName(exp)
                    case _ => missingResult(serviceName)
                  }
                  recordResponse(ctfs.ReqRep(args, _root_.com.twitter.util.Throw(rep)), methodStats)
              }
              Future.value(Buf.ByteArray.Owned.extract(value.response))
            case t @ Throw(_) =>
              recordResponse(ctfs.ReqRep(req, t), methodStats)
              Future.const(t.cast[Array[Byte]])
          }
        }
      }
    }
    // ---- end boilerplate.

    val ping: finagle$Filter[(TProtocol, Int), Array[Byte], Ping.Args, Ping.SuccessType] = {
      val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[Ping.Args, Ping.Result]] = perMethodStatsFilter(Ping)
    
      val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[Ping.Args, Ping.Result]] {
        def apply(
          request: (TProtocol, Int),
          service: _root_.com.twitter.finagle.Service[(TProtocol, Int), RichResponse[Ping.Args, Ping.Result]]
        ): Future[RichResponse[Ping.Args, Ping.Result]] = {
          val iprot = request._1
          val seqid = request._2
          val res = service(request)
          res.transform {
            case _root_.com.twitter.util.Throw(e: TProtocolException) =>
              iprot.readMessageEnd()
              Future.value(
                ProtocolExceptionResponse(
                  null,
                  exception("ping", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                  new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
            case _ =>
              res
          }
        }
      }
    
      val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[Ping.Args, Ping.Result], Ping.Args, Ping.SuccessType] {
        def apply(
          request: (TProtocol, Int),
          service: _root_.com.twitter.finagle.Service[Ping.Args, Ping.SuccessType]
        ): Future[RichResponse[Ping.Args, Ping.Result]] = {
          val iprot = request._1
          val seqid = request._2
          val start = System.nanoTime
          val args = Ping.Args.decode(iprot)
          iprot.readMessageEnd()
          _root_.com.twitter.finagle.tracing.Trace.recordBinary("srv/request_deserialization_ns", System.nanoTime - start)
          val res = _root_.com.twitter.finagle.context.Contexts.local.let(
            _root_.com.twitter.finagle.thrift.MethodMetadata.Key,
            _root_.com.twitter.finagle.thrift.MethodMetadata(Ping)) {
            service(args)
          }
          res.transform {
            case _root_.com.twitter.util.Return(value) =>
              val methodResult = Ping.Result(success = Some(value))
              Future.value(
                SuccessfulResponse(
                  args,
                  reply("ping", seqid, methodResult),
                  methodResult))
            case t @ _root_.com.twitter.util.Throw(_) =>
              Future.const(t.cast[RichResponse[Ping.Args, Ping.Result]])
          }
        }
      }
    
      statsFilter.andThen(protocolExnFilter).andThen(serdeFilter)
    }
    val addUser: finagle$Filter[(TProtocol, Int), Array[Byte], AddUser.Args, AddUser.SuccessType] = {
      val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[AddUser.Args, AddUser.Result]] = perMethodStatsFilter(AddUser)
    
      val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[AddUser.Args, AddUser.Result]] {
        def apply(
          request: (TProtocol, Int),
          service: _root_.com.twitter.finagle.Service[(TProtocol, Int), RichResponse[AddUser.Args, AddUser.Result]]
        ): Future[RichResponse[AddUser.Args, AddUser.Result]] = {
          val iprot = request._1
          val seqid = request._2
          val res = service(request)
          res.transform {
            case _root_.com.twitter.util.Throw(e: TProtocolException) =>
              iprot.readMessageEnd()
              Future.value(
                ProtocolExceptionResponse(
                  null,
                  exception("addUser", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                  new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
            case _ =>
              res
          }
        }
      }
    
      val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[AddUser.Args, AddUser.Result], AddUser.Args, AddUser.SuccessType] {
        def apply(
          request: (TProtocol, Int),
          service: _root_.com.twitter.finagle.Service[AddUser.Args, AddUser.SuccessType]
        ): Future[RichResponse[AddUser.Args, AddUser.Result]] = {
          val iprot = request._1
          val seqid = request._2
          val start = System.nanoTime
          val args = AddUser.Args.decode(iprot)
          iprot.readMessageEnd()
          _root_.com.twitter.finagle.tracing.Trace.recordBinary("srv/request_deserialization_ns", System.nanoTime - start)
          val res = _root_.com.twitter.finagle.context.Contexts.local.let(
            _root_.com.twitter.finagle.thrift.MethodMetadata.Key,
            _root_.com.twitter.finagle.thrift.MethodMetadata(AddUser)) {
            service(args)
          }
          res.transform {
            case _root_.com.twitter.util.Return(value) =>
              val methodResult = AddUser.Result()
              Future.value(
                SuccessfulResponse(
                  args,
                  reply("addUser", seqid, methodResult),
                  methodResult))
            case t @ _root_.com.twitter.util.Throw(_) =>
              Future.const(t.cast[RichResponse[AddUser.Args, AddUser.Result]])
          }
        }
      }
    
      statsFilter.andThen(protocolExnFilter).andThen(serdeFilter)
    }
    val getUser: finagle$Filter[(TProtocol, Int), Array[Byte], GetUser.Args, GetUser.SuccessType] = {
      val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[GetUser.Args, GetUser.Result]] = perMethodStatsFilter(GetUser)
    
      val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[GetUser.Args, GetUser.Result]] {
        def apply(
          request: (TProtocol, Int),
          service: _root_.com.twitter.finagle.Service[(TProtocol, Int), RichResponse[GetUser.Args, GetUser.Result]]
        ): Future[RichResponse[GetUser.Args, GetUser.Result]] = {
          val iprot = request._1
          val seqid = request._2
          val res = service(request)
          res.transform {
            case _root_.com.twitter.util.Throw(e: TProtocolException) =>
              iprot.readMessageEnd()
              Future.value(
                ProtocolExceptionResponse(
                  null,
                  exception("getUser", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                  new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
            case _ =>
              res
          }
        }
      }
    
      val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[GetUser.Args, GetUser.Result], GetUser.Args, GetUser.SuccessType] {
        def apply(
          request: (TProtocol, Int),
          service: _root_.com.twitter.finagle.Service[GetUser.Args, GetUser.SuccessType]
        ): Future[RichResponse[GetUser.Args, GetUser.Result]] = {
          val iprot = request._1
          val seqid = request._2
          val start = System.nanoTime
          val args = GetUser.Args.decode(iprot)
          iprot.readMessageEnd()
          _root_.com.twitter.finagle.tracing.Trace.recordBinary("srv/request_deserialization_ns", System.nanoTime - start)
          val res = _root_.com.twitter.finagle.context.Contexts.local.let(
            _root_.com.twitter.finagle.thrift.MethodMetadata.Key,
            _root_.com.twitter.finagle.thrift.MethodMetadata(GetUser)) {
            service(args)
          }
          res.transform {
            case _root_.com.twitter.util.Return(value) =>
              val methodResult = GetUser.Result(success = Some(value))
              Future.value(
                SuccessfulResponse(
                  args,
                  reply("getUser", seqid, methodResult),
                  methodResult))
            case t @ _root_.com.twitter.util.Throw(_) =>
              Future.const(t.cast[RichResponse[GetUser.Args, GetUser.Result]])
          }
        }
      }
    
      statsFilter.andThen(protocolExnFilter).andThen(serdeFilter)
    }
  }

}
