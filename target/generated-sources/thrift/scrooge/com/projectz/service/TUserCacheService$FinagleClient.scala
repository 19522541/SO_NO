/**
 * Generated by Scrooge
 *   version: 20.4.0
 *   rev: 2d3edcfb2b025024319594ccdd4d7afe488fa6b4
 *   built at: 20200402-030121
 */
package com.projectz.service

import com.twitter.finagle.{service => ctfs}
import com.twitter.finagle.stats.{NullStatsReceiver, StatsReceiver}
import com.twitter.finagle.thrift.{Protocols, RichClientParam, ThriftClientRequest}
import com.twitter.util.Future
import org.apache.thrift.TApplicationException
import org.apache.thrift.protocol._


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
class TUserCacheService$FinagleClient(
    val service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
    val clientParam: RichClientParam)
  extends TUserCacheService[Future] {

  @deprecated("Use com.twitter.finagle.thrift.RichClientParam", "2017-08-16")
  def this(
    service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
    protocolFactory: TProtocolFactory = Protocols.binaryFactory(),
    serviceName: String = "TUserCacheService",
    stats: StatsReceiver = NullStatsReceiver,
    responseClassifier: ctfs.ResponseClassifier = ctfs.ResponseClassifier.Default
  ) = this(
    service,
    RichClientParam(
      protocolFactory,
      serviceName,
      clientStats = stats,
      responseClassifier = responseClassifier
    )
  )

  import TUserCacheService._

  def serviceName: String = clientParam.serviceName

  override def asClosable: _root_.com.twitter.util.Closable = service

  private[this] def protocolFactory: TProtocolFactory = clientParam.restrictedProtocolFactory

  private[this] val tlReusableBuffer: _root_.com.twitter.scrooge.TReusableBuffer =
    clientParam.createThriftReusableBuffer()

  protected def encodeRequest(name: String, args: _root_.com.twitter.scrooge.ThriftStruct): ThriftClientRequest = {
    val memoryBuffer = tlReusableBuffer.get()
    try {
      val oprot = protocolFactory.getProtocol(memoryBuffer)

      oprot.writeMessageBegin(new TMessage(name, TMessageType.CALL, 0))
      args.write(oprot)
      oprot.writeMessageEnd()
      oprot.getTransport().flush()
      val bytes = _root_.java.util.Arrays.copyOfRange(
        memoryBuffer.getArray(),
        0,
        memoryBuffer.length()
      )
      new ThriftClientRequest(bytes, false)
    } finally {
      tlReusableBuffer.reset()
    }
  }

  protected def decodeResponse[T <: _root_.com.twitter.scrooge.ThriftStruct](
    resBytes: Array[Byte],
    codec: _root_.com.twitter.scrooge.ThriftStructCodec[T]
  ): T = {
    val iprot = protocolFactory.getProtocol(
      new org.apache.thrift.transport.TMemoryInputTransport(resBytes)
    )
    val msg = iprot.readMessageBegin()
    try {
      if (msg.`type` == TMessageType.EXCEPTION) {
        val exception = TApplicationException.readFrom(iprot) match {
          case sourced: _root_.com.twitter.finagle.SourcedException =>
            if (serviceName != "") sourced.serviceName = serviceName
            sourced
          case e => e
        }
        throw exception
      } else {
        codec.decode(iprot)
      }
    } finally {
      iprot.readMessageEnd()
    }
  }

  protected def missingResult(name: String): TApplicationException = {
    new TApplicationException(
      TApplicationException.MISSING_RESULT,
      name + " failed: unknown result"
    )
  }

  protected def setServiceName(ex: Throwable): Throwable =
    if (this.serviceName == "") ex
    else {
      ex match {
        case se: _root_.com.twitter.finagle.SourcedException =>
          se.serviceName = this.serviceName
          se
        case _ => ex
      }
    }

  // ----- end boilerplate.

  private[this] def stats: StatsReceiver = clientParam.clientStats
  private[this] def responseClassifier: ctfs.ResponseClassifier = clientParam.responseClassifier

  private[this] val scopedStats: StatsReceiver = if (serviceName != "") stats.scope(serviceName) else stats
  private[this] object __stats_ping {
    val RequestsCounter = scopedStats.scope("ping").counter("requests")
    val SuccessCounter = scopedStats.scope("ping").counter("success")
    val FailuresCounter = scopedStats.scope("ping").counter("failures")
    val FailuresScope = scopedStats.scope("ping").scope("failures")
  }
  val pingTUserCacheServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[String] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, Ping.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("ping"))
        }
      }
    }
  }
  
  def ping(): Future[String] = {
    __stats_ping.RequestsCounter.incr()
    val inputArgs = Ping.Args()
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.ClientDeserializeCtx[String](inputArgs, pingTUserCacheServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.ClientDeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      serdeCtx.rpcName("ping")
      val start = System.nanoTime
      val serialized = encodeRequest("ping", inputArgs)
      serdeCtx.serializationTime(System.nanoTime - start)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Ignorable => // Do nothing.
          case ctfs.ResponseClass.Successful(_) =>
            __stats_ping.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_ping.FailuresCounter.incr()
            response match {
              case _root_.com.twitter.util.Throw(ex) =>
                setServiceName(ex)
                __stats_ping.FailuresScope.counter(
                  _root_.com.twitter.util.Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_addUser {
    val RequestsCounter = scopedStats.scope("addUser").counter("requests")
    val SuccessCounter = scopedStats.scope("addUser").counter("success")
    val FailuresCounter = scopedStats.scope("addUser").counter("failures")
    val FailuresScope = scopedStats.scope("addUser").scope("failures")
  }
  val addUserTUserCacheServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[Unit] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, AddUser.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("addUser"))
        }
      }
    }
  }
  
  def addUser(userInfo: com.projectz.domain.thrift.TUserInfo): Future[Unit] = {
    __stats_addUser.RequestsCounter.incr()
    val inputArgs = AddUser.Args(userInfo)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.ClientDeserializeCtx[Unit](inputArgs, addUserTUserCacheServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.ClientDeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      serdeCtx.rpcName("addUser")
      val start = System.nanoTime
      val serialized = encodeRequest("addUser", inputArgs)
      serdeCtx.serializationTime(System.nanoTime - start)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Ignorable => // Do nothing.
          case ctfs.ResponseClass.Successful(_) =>
            __stats_addUser.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_addUser.FailuresCounter.incr()
            response match {
              case _root_.com.twitter.util.Throw(ex) =>
                setServiceName(ex)
                __stats_addUser.FailuresScope.counter(
                  _root_.com.twitter.util.Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
  private[this] object __stats_getUser {
    val RequestsCounter = scopedStats.scope("getUser").counter("requests")
    val SuccessCounter = scopedStats.scope("getUser").counter("success")
    val FailuresCounter = scopedStats.scope("getUser").counter("failures")
    val FailuresScope = scopedStats.scope("getUser").scope("failures")
  }
  val getUserTUserCacheServiceReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[com.projectz.domain.thrift.TUserInfo] = {
    response: Array[Byte] => {
      val result = decodeResponse(response, GetUser.Result)
  
      result.firstException() match {
        case Some(exception) => _root_.com.twitter.util.Throw(setServiceName(exception))
        case _ => result.successField match {
          case Some(success) => _root_.com.twitter.util.Return(success)
          case _ => _root_.com.twitter.util.Throw(missingResult("getUser"))
        }
      }
    }
  }
  
  def getUser(userId: com.projectz.domain.thrift.TUserID): Future[com.projectz.domain.thrift.TUserInfo] = {
    __stats_getUser.RequestsCounter.incr()
    val inputArgs = GetUser.Args(userId)
  
    val serdeCtx = new _root_.com.twitter.finagle.thrift.ClientDeserializeCtx[com.projectz.domain.thrift.TUserInfo](inputArgs, getUserTUserCacheServiceReplyDeserializer)
    _root_.com.twitter.finagle.context.Contexts.local.let(
      _root_.com.twitter.finagle.thrift.ClientDeserializeCtx.Key,
      serdeCtx,
      _root_.com.twitter.finagle.thrift.Headers.Request.Key,
      _root_.com.twitter.finagle.thrift.Headers.Request.newValues
    ) {
      serdeCtx.rpcName("getUser")
      val start = System.nanoTime
      val serialized = encodeRequest("getUser", inputArgs)
      serdeCtx.serializationTime(System.nanoTime - start)
      this.service(serialized).flatMap { response =>
        Future.const(serdeCtx.deserialize(response))
      }.respond { response =>
        val responseClass = responseClassifier.applyOrElse(
          ctfs.ReqRep(inputArgs, response),
          ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Ignorable => // Do nothing.
          case ctfs.ResponseClass.Successful(_) =>
            __stats_getUser.SuccessCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            __stats_getUser.FailuresCounter.incr()
            response match {
              case _root_.com.twitter.util.Throw(ex) =>
                setServiceName(ex)
                __stats_getUser.FailuresScope.counter(
                  _root_.com.twitter.util.Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }
  }
}
