/**
 * Generated by Scrooge
 *   version: 20.4.0
 *   rev: 2d3edcfb2b025024319594ccdd4d7afe488fa6b4
 *   built at: 20200402-030121
 */
package com.projectz.domain.thrift

import com.twitter.io.Buf
import com.twitter.scrooge.{
  InvalidFieldsException,
  LazyTProtocol,
  StructBuilder,
  StructBuilderFactory,
  TFieldBlob,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructField,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.TMemoryBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.reflect.{ClassTag, classTag}


object TUserInfo extends ValidatingThriftStructCodec3[TUserInfo] with StructBuilderFactory[TUserInfo] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct: TStruct = new TStruct("TUserInfo")
  val UserIdField: TField = new TField("userId", TType.STRUCT, 1)
  val UserIdFieldManifest: Manifest[com.projectz.domain.thrift.TUserID] = implicitly[Manifest[com.projectz.domain.thrift.TUserID]]
  val UsernameField: TField = new TField("username", TType.STRING, 2)
  val UsernameFieldManifest: Manifest[String] = implicitly[Manifest[String]]
  val AgeField: TField = new TField("age", TType.I32, 3)
  val AgeFieldManifest: Manifest[Int] = implicitly[Manifest[Int]]
  val SexField: TField = new TField("sex", TType.STRING, 4)
  val SexFieldManifest: Manifest[String] = implicitly[Manifest[String]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      UserIdField,
      false,
      false,
      UserIdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      UsernameField,
      false,
      false,
      UsernameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      AgeField,
      false,
      false,
      AgeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      SexField,
      false,
      false,
      SexFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  private val fieldTypes: IndexedSeq[ClassTag[_]] = IndexedSeq(
    classTag[com.projectz.domain.thrift.TUserID].asInstanceOf[ClassTag[_]],
    classTag[String].asInstanceOf[ClassTag[_]],
    classTag[Int].asInstanceOf[ClassTag[_]],
    classTag[String].asInstanceOf[ClassTag[_]]
  )

  private[this] val structFields: Seq[ThriftStructField[TUserInfo]] = {
    Seq(
      new ThriftStructField[TUserInfo](
        UserIdField,
        _root_.scala.Some(UserIdFieldManifest),
        classOf[TUserInfo]) {
          def getValue[R](struct: TUserInfo): R = struct.userId.asInstanceOf[R]
      },
      new ThriftStructField[TUserInfo](
        UsernameField,
        _root_.scala.Some(UsernameFieldManifest),
        classOf[TUserInfo]) {
          def getValue[R](struct: TUserInfo): R = struct.username.asInstanceOf[R]
      },
      new ThriftStructField[TUserInfo](
        AgeField,
        _root_.scala.Some(AgeFieldManifest),
        classOf[TUserInfo]) {
          def getValue[R](struct: TUserInfo): R = struct.age.asInstanceOf[R]
      },
      new ThriftStructField[TUserInfo](
        SexField,
        _root_.scala.Some(SexFieldManifest),
        classOf[TUserInfo]) {
          def getValue[R](struct: TUserInfo): R = struct.sex.asInstanceOf[R]
      }
    )
  }

  override lazy val metaData: ThriftStructMetaData[TUserInfo] =
    new ThriftStructMetaData(this, structFields, fieldInfos, Seq(), structAnnotations)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: TUserInfo): Unit = {
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: TUserInfo): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    buf ++= validateField(item.userId)
    buf ++= validateField(item.username)
    buf ++= validateField(item.age)
    buf ++= validateField(item.sex)
    buf.toList
  }

  def withoutPassthroughFields(original: TUserInfo): TUserInfo =
    new Immutable(
      userId =
        {
          val field = original.userId
          com.projectz.domain.thrift.TUserID.withoutPassthroughFields(field)
        },
      username =
        {
          val field = original.username
          field
        },
      age =
        {
          val field = original.age
          field
        },
      sex =
        {
          val field = original.sex
          field
        }
    )

  def newBuilder(): StructBuilder[TUserInfo] = new TUserInfoStructBuilder(_root_.scala.None, fieldTypes)

  override def encode(_item: TUserInfo, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): TUserInfo = {

    var userId: com.projectz.domain.thrift.TUserID = null
    var usernameOffset: Int = -1
    var age: Int = 0
    var sexOffset: Int = -1

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                userId = readUserIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'userId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                usernameOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'username' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.I32 =>
    
                age = readAgeValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'age' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRING =>
                sexOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'sex' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      userId,
      usernameOffset,
      age,
      sexOffset,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): TUserInfo =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[thrift] def eagerDecode(_iprot: TProtocol): TUserInfo = {
    var userId: com.projectz.domain.thrift.TUserID = null
    var username: String = null
    var age: Int = 0
    var sex: String = null
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRUCT =>
                userId = readUserIdValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'userId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                username = readUsernameValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'username' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.I32 =>
                age = readAgeValue(_iprot)
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'age' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRING =>
                sex = readSexValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'sex' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      userId,
      username,
      age,
      sex,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    userId: com.projectz.domain.thrift.TUserID,
    username: String,
    age: Int,
    sex: String
  ): TUserInfo =
    new Immutable(
      userId,
      username,
      age,
      sex
    )

  def unapply(_item: TUserInfo): _root_.scala.Option[_root_.scala.Tuple4[com.projectz.domain.thrift.TUserID, String, Int, String]] = _root_.scala.Some(_item.toTuple)


  @inline private[thrift] def readUserIdValue(_iprot: TProtocol): com.projectz.domain.thrift.TUserID = {
    com.projectz.domain.thrift.TUserID.decode(_iprot)
  }

  @inline private def writeUserIdField(userId_item: com.projectz.domain.thrift.TUserID, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(UserIdField)
    writeUserIdValue(userId_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeUserIdValue(userId_item: com.projectz.domain.thrift.TUserID, _oprot: TProtocol): Unit = {
    userId_item.write(_oprot)
  }

  @inline private[thrift] def readUsernameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeUsernameField(username_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(UsernameField)
    writeUsernameValue(username_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeUsernameValue(username_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(username_item)
  }

  @inline private[thrift] def readAgeValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeAgeField(age_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(AgeField)
    writeAgeValue(age_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeAgeValue(age_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(age_item)
  }

  @inline private[thrift] def readSexValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeSexField(sex_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(SexField)
    writeSexValue(sex_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeSexValue(sex_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(sex_item)
  }


  object Immutable extends ThriftStructCodec3[TUserInfo] {
    override def encode(_item: TUserInfo, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): TUserInfo = TUserInfo.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[TUserInfo] = TUserInfo.metaData
  }

  /**
   * The default read-only implementation of TUserInfo.  You typically should not need to
   * directly reference this class; instead, use the TUserInfo.apply method to construct
   * new instances.
   */
  class Immutable(
      val userId: com.projectz.domain.thrift.TUserID,
      val username: String,
      val age: Int,
      val sex: String,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TUserInfo {
    def this(
      userId: com.projectz.domain.thrift.TUserID,
      username: String,
      age: Int,
      sex: String
    ) = this(
      userId,
      username,
      age,
      sex,
      immutable$Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val userId: com.projectz.domain.thrift.TUserID,
      usernameOffset: Int,
      val age: Int,
      sexOffset: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends TUserInfo {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val username: String =
      if (usernameOffset == -1)
        null
      else {
        _proto.decodeString(_buf, usernameOffset)
      }
    lazy val sex: String =
      if (sexOffset == -1)
        null
      else {
        _proto.decodeString(_buf, sexOffset)
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the TUserInfo trait with additional state or
   * behavior and implement the read-only methods from TUserInfo using an underlying
   * instance.
   */
  trait Proxy extends TUserInfo {
    protected def _underlying_TUserInfo: TUserInfo
    override def userId: com.projectz.domain.thrift.TUserID = _underlying_TUserInfo.userId
    override def username: String = _underlying_TUserInfo.username
    override def age: Int = _underlying_TUserInfo.age
    override def sex: String = _underlying_TUserInfo.sex
    override def _passthroughFields: immutable$Map[Short, TFieldBlob] = _underlying_TUserInfo._passthroughFields
  }
}

/**
 * Prefer the companion object's [[com.projectz.domain.thrift.TUserInfo.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait TUserInfo
  extends ThriftStruct
  with _root_.scala.Product4[com.projectz.domain.thrift.TUserID, String, Int, String]
  with ValidatingThriftStruct[TUserInfo]
  with java.io.Serializable
{
  import TUserInfo._

  def userId: com.projectz.domain.thrift.TUserID
  def username: String
  def age: Int
  def sex: String

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1: com.projectz.domain.thrift.TUserID = userId
  def _2: String = username
  def _3: Int = age
  def _4: String = sex

  def toTuple: _root_.scala.Tuple4[com.projectz.domain.thrift.TUserID, String, Int, String] = {
    (
      userId,
      username,
      age,
      sex
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (userId ne null) {
                writeUserIdValue(userId, _oprot)
                _root_.scala.Some(TUserInfo.UserIdField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (username ne null) {
                writeUsernameValue(username, _oprot)
                _root_.scala.Some(TUserInfo.UsernameField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (true) {
                writeAgeValue(age, _oprot)
                _root_.scala.Some(TUserInfo.AgeField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (sex ne null) {
                writeSexValue(sex, _oprot)
                _root_.scala.Some(TUserInfo.SexField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): TUserInfo = {
    var userId: com.projectz.domain.thrift.TUserID = this.userId
    var username: String = this.username
    var age: Int = this.age
    var sex: String = this.sex
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        userId = readUserIdValue(_blob.read)
      case 2 =>
        username = readUsernameValue(_blob.read)
      case 3 =>
        age = readAgeValue(_blob.read)
      case 4 =>
        sex = readSexValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      userId,
      username,
      age,
      sex,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): TUserInfo = {
    var userId: com.projectz.domain.thrift.TUserID = this.userId
    var username: String = this.username
    var age: Int = this.age
    var sex: String = this.sex

    _fieldId match {
      case 1 =>
        userId = null
      case 2 =>
        username = null
      case 3 =>
        age = 0
      case 4 =>
        sex = null
      case _ =>
    }
    new Immutable(
      userId,
      username,
      age,
      sex,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetUserId: TUserInfo = unsetField(1)

  def unsetUsername: TUserInfo = unsetField(2)

  def unsetAge: TUserInfo = unsetField(3)

  def unsetSex: TUserInfo = unsetField(4)


  override def write(_oprot: TProtocol): Unit = {
    TUserInfo.validate(this)
    _oprot.writeStructBegin(Struct)
    if (userId ne null) writeUserIdField(userId, _oprot)
    if (username ne null) writeUsernameField(username, _oprot)
    writeAgeField(age, _oprot)
    if (sex ne null) writeSexField(sex, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    userId: com.projectz.domain.thrift.TUserID = this.userId,
    username: String = this.username,
    age: Int = this.age,
    sex: String = this.sex,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): TUserInfo =
    new Immutable(
      userId,
      username,
      age,
      sex,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[TUserInfo]

  private def _equals(x: TUserInfo, y: TUserInfo): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator) &&
      x._passthroughFields == y._passthroughFields

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[TUserInfo])

  override def hashCode: Int = {
    _root_.scala.runtime.ScalaRunTime._hashCode(this)
  }

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 4

  override def productElement(n: Int): Any = n match {
    case 0 => this.userId
    case 1 => this.username
    case 2 => this.age
    case 3 => this.sex
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "TUserInfo"

  def _codec: ValidatingThriftStructCodec3[TUserInfo] = TUserInfo

  def newBuilder(): StructBuilder[TUserInfo] = new TUserInfoStructBuilder(_root_.scala.Some(this), fieldTypes)
}

private[thrift] class TUserInfoStructBuilder(instance: _root_.scala.Option[TUserInfo], fieldTypes: IndexedSeq[ClassTag[_]])
    extends StructBuilder[TUserInfo](fieldTypes) {

  def build(): TUserInfo = instance match {
    case _root_.scala.Some(i) =>
      TUserInfo(
        (if (fieldArray(0) == null) i.userId else fieldArray(0)).asInstanceOf[com.projectz.domain.thrift.TUserID],
        (if (fieldArray(1) == null) i.username else fieldArray(1)).asInstanceOf[String],
        (if (fieldArray(2) == null) i.age else fieldArray(2)).asInstanceOf[Int],
        (if (fieldArray(3) == null) i.sex else fieldArray(3)).asInstanceOf[String]
      )
    case _root_.scala.None =>
      if (fieldArray.contains(null)) throw new InvalidFieldsException(structBuildError("TUserInfo"))
      else {
        TUserInfo(
          fieldArray(0).asInstanceOf[com.projectz.domain.thrift.TUserID],
          fieldArray(1).asInstanceOf[String],
          fieldArray(2).asInstanceOf[Int],
          fieldArray(3).asInstanceOf[String]
        )
      }
    }
}

